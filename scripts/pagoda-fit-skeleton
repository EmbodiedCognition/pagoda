#!/usr/bin/env python

import climate
import io
import numpy as np
import pagoda
import pagoda.cooper
import re
import scipy.optimize

logging = climate.get_logger('fit-skeleton')

g = climate.add_group('optimization files')
g.add_argument('-a', '--markers', metavar='FILE',
               help='load marker attachments from FILE')
g.add_argument('-b', '--bounds', metavar='FILE',
               help='load parameter bounds from FILE')
g.add_argument('-m', '--motion', metavar='FILE',
               help='load motion data from FILE')
g.add_argument('-o', '--output', default='optimized-', metavar='PREFIX',
               help='name optimized output files starting with PREFIX')
g.add_argument('-s', '--skeleton', metavar='FILE',
               help='load skeleton definition from FILE')

g = climate.add_group('optimizer options')
g.add_argument('-i', '--maxiter', type=int, metavar='N',
               help='maximum number of optimization iterations')
g.add_argument('-p', '--popsize', type=int, default=10, metavar='N',
               help='size of the population')

g = climate.add_group('pagoda options')
g.add_argument('-r', '--fps', type=float, default=120, metavar='N',
               help='set world to run at N frames per second')
g.add_argument('-f', '--start-frame', type=int, metavar='N',
               help='optimize on motion windows starting at frame N')
g.add_argument('-F', '--end-frame', type=int, metavar='N',
               help='optimize on motion windows ending at frame N')
g.add_argument('-w', '--frames', type=int, metavar='N',
               help='optimize on motion windows of N frames')


class Template:
    def __init__(self, filename):
        with open(filename) as handle:
            self.content = handle.read()
        self.fields = sorted(set(re.findall(r'\{([^\}]+)\}', self.content)))
        logging.warn('%s: loaded %d fields to optimize', filename, len(self))

    def __len__(self):
        return len(self.fields)

    def fill(self, values):
        return self.content.format(**dict(zip(self.fields, values)))

    def as_file(self, values):
        return io.StringIO(self.fill(values))


def build_cost(args, skeleton, markers):
    w = pagoda.cooper.World(1. / args.fps)
    def cost(x):
        w.load_skeleton(skeleton.as_file(x[:len(skeleton)]))
        w.load_markers(args.motion, markers.as_file(x[len(skeleton):]))
        w.markers.erp = 0.3
        w.markers.cfms[:] = 1e-3
        window = args.frames or args.fps
        offset = np.random.randint(
            args.start_frame or 1,
            args.end_frame or len(w.markers.data) - 1 - window)
        F = np.array([np.nanmean(abs(w.markers.forces()))
                      for _ in w.follow_markers(
                              offset,
                              offset + window,
                              w.settle_to_markers(offset, 0, 20))])
        logging.warn('cost %s +/- %s', F.mean(), F.std())
        return F.mean() + F.std()
    return cost


def saver(output, skeleton, markers):
    S = len(skeleton)
    def save(x, *args, **kwargs):
        with open(output + 'skeleton.txt', 'w') as handle:
            handle.write(skeleton.fill(x[:S]))
        logging.warn('saved %s', output + 'skeleton.txt')
        with open(output + 'markers.txt', 'w') as handle:
            handle.write(markers.fill(x[S:]))
        logging.warn('saved %s', output + 'markers.txt')
    return save


def main(args):
    skeleton = Template(args.skeleton)
    markers = Template(args.markers)

    S = len(skeleton)
    upper = np.zeros((S + len(markers), ), 'f')
    upper[:S] = 0.4
    upper[S:] = 1
    lower = np.zeros((S + len(markers), ), 'f')
    lower[:S] = 0.03
    lower[S:] = -1

    if args.bounds:
        with open(args.bounds) as h:
            logging.warn('%s: loading parameter bounds', args.bounds)
            for l in h:
                l = l.split('#')[0].strip()
                if not l:
                    continue
                try:
                    name, lo, hi = l.split()
                    i = skeleton.fields.index(name)
                    lower[i] = float(lo)
                    upper[i] = float(hi)
                    logging.warn('set bound for %s (%d) to (%.4f, %.4f)',
                                 name, i, lower[i], upper[i])
                except Exception as e:
                    logging.exception('error')

    save = saver(args.output, skeleton, markers)
    res = scipy.optimize.differential_evolution(
        build_cost(args, skeleton, markers),
        list(zip(lower, upper)),
        popsize=args.popsize,
        maxiter=args.maxiter,
        callback=save)
    save(res.x)


if __name__ == '__main__':
    climate.call(main, default_level='WARN')
