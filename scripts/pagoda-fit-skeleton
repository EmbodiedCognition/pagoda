#!/usr/bin/env python

import climate
import io
import numpy as np
import pagoda
import pagoda.cooper
import re
import scipy.optimize

logging = climate.get_logger('fit-skeleton')

climate.add_arg('-a', '--markers', metavar='FILE',
                help='load marker attachments from FILE')
climate.add_arg('-b', '--bounds', metavar='FILE',
                help='load parameter bounds from FILE')
climate.add_arg('-m', '--motion', metavar='FILE',
                help='load motion data from FILE')
climate.add_arg('-o', '--output', default='optimized-', metavar='PREFIX',
                help='name optimized output files starting with PREFIX')
climate.add_arg('-s', '--skeleton', metavar='FILE',
                help='load skeleton definition from FILE')

g = climate.add_group('simulation options')
g.add_argument('-r', '--fps', type=float, default=120, metavar='N',
               help='set world to run at N frames per second')
g.add_argument('-f', '--start-frame', type=int, default=0, metavar='N',
               help='optimize on motion starting at frame N')
g.add_argument('-F', '--end-frame', type=int, metavar='N',
               help='optimize on motion ending at frame N')


class Template:
    def __init__(self, filename):
        with open(filename) as handle:
            self.content = handle.read()
        self.fields = sorted(set(re.findall(r'\{([^\}]+)\}', self.content)))
        logging.info('%s: loaded %d fields to optimize', filename, len(self))

    def __len__(self):
        return len(self.fields)

    def fill(self, values):
        return self.content.format(**dict(zip(self.fields, values)))

    def as_file(self, values):
        return io.StringIO(self.fill(values))


def build_cost(args, skeleton, markers):
    w = pagoda.cooper.World(1. / args.fps)
    def cost(x):
        w.load_skeleton(skeleton.as_file(x[:len(skeleton)]))
        w.load_markers(args.motion, markers.as_file(x[len(skeleton):]))
        w.markers.erp = 0.3
        w.markers.cfms[:] = 1e-3
        F = np.array([np.nanmean(abs(w.markers.forces()))
                      for _ in w.follow_markers(
                              args.start_frame,
                              args.end_frame or args.start_frame + args.fps,
                              w.settle_to_markers(args.start_frame, 0, 20))])
        logging.info('cost %s +/- %s', F.mean(), F.std())
        return F.mean() + F.std()
    return cost


def main(args):
    skeleton = Template(args.skeleton)
    markers = Template(args.markers)

    f = build_cost(args, skeleton, markers)

    S = len(skeleton)
    upper = np.zeros((S + len(markers), ), 'f')
    upper[:S] = 0.4
    upper[S:] = 1
    lower = np.zeros((S + len(markers), ), 'f')
    lower[:S] = 0.03
    lower[S:] = -1

    if args.bounds:
        with open(args.bounds) as h:
            logging.info('%s: loading parameter bounds', args.bounds)
            for l in h:
                l = l.split('#')[0].strip()
                if not l:
                    continue
                try:
                    name, lo, hi = l.split()
                    i = skeleton.fields.index(name)
                    lower[i] = float(lo)
                    upper[i] = float(hi)
                    logging.info('set bound for %s (%d) to (%.4f, %.4f)',
                                 name, i, lower[i], upper[i])
                except Exception as e:
                    logging.exception('error')

    res = scipy.optimize.differential_evolution(f, list(zip(lower, upper)))

    values = res.x

    with open(args.prefix + 'skeleton.txt', 'w') as handle:
        handle.write(skeleton.fill(values[:S]))
    with open(args.prefix + 'markers.txt', 'w') as handle:
        handle.write(markers.fill(values[S:]))


if __name__ == '__main__':
    climate.call(main)
