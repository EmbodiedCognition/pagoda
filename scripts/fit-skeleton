#!/usr/bin/env python

import climate
import io
import numpy as np
import pagoda
import pagoda.cooper
import re
import scipy.optimize

logging = climate.get_logger('fit-skeleton')

climate.add_arg('-a', '--markers', metavar='FILE',
                help='load marker attachments from FILE')
climate.add_arg('-m', '--motion', metavar='FILE',
                help='load motion data from FILE')
climate.add_arg('-o', '--output', default='optimized-', metavar='PREFIX',
                help='name optimized output files starting with PREFIX')
climate.add_arg('-s', '--skeleton', metavar='FILE',
                help='load skeleton definition from FILE')

g = climate.add_group('simulation options')
g.add_argument('-r', '--fps', type=float, default=120, metavar='N',
               help='set world to run at N frames per second')
g.add_argument('-f', '--start-frame', type=int, default=0, metavar='N',
               help='optimize on motion starting at frame N')
g.add_argument('-F', '--end-frame', type=int, metavar='N',
               help='optimize on motion ending at frame N')


class Template:
    def __init__(self, filename):
        with open(filename) as handle:
            self.content = handle.read()
        self.fields = set()
        for match in re.findall(r'(?<=\{)[^\}]+(?=\})', self.content):
            self.fields.add(match)
        logging.info('%s: loaded %d fields to optimize', filename, len(self))

    def __len__(self):
        return len(self.fields)

    def fill(self, values):
        return self.content.format(**dict(zip(self.fields, values)))

    def as_file(self, values):
        return io.StringIO(self.fill(values))


def build_cost(args, skeleton, markers):
    def cost(x):
        w = pagoda.cooper.World(1. / args.fps)
        w.load_skeleton(skeleton.as_file(x[:len(skeleton)]))
        w.load_markers(args.motion, markers.as_file(x[len(skeleton):]))
        states = w.settle_to_markers(args.start_frame)
        distances = [np.nanmean(w.markers.distances())
                     for _ in w.follow_markers(start=args.start_frame,
                                               end=args.end_frame,
                                               states=states)]
        logging.info('cost %.2f +/- %.2f', np.nanmean(distances), np.nanstd(distances))
        return np.nanmean(distances) + np.nanstd(distances)
    return cost


def main(args):
    skeleton = Template(args.skeleton)
    markers = Template(args.markers)

    f = build_cost(args, skeleton, markers)

    S = len(skeleton)
    N = S + len(markers)

    upper = np.zeros((N, ), 'f')
    upper[:S] = 0.4
    upper[S:] = 1

    lower = np.zeros((N, ), 'f')
    lower[:S] = 0.03
    lower[S:] = -1

    res = scipy.optimize.differential_evolution(f, list(zip(lower, upper)))

    with open(args.prefix + 'skeleton.txt', 'w') as handle:
        handle.write(skeleton.fill(values[:len(skeleton)]))
    with open(args.prefix + 'markers.txt', 'w') as handle:
        handle.write(markers.fill(values[len(skeleton):]))


if __name__ == '__main__':
    climate.call(main)
